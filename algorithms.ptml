<html>
<head>
<!--include head.txt -->
    <script src="Algocynfas/lib/bootstrap.min.js"></script>
    <script src="Algocynfas/lib/fabric.js"></script>

    <title>
        Algorithms
    </title>
</head>

<body>

    <!--include menu.txt -->

    <h1 class="chap-title">
        Algorithms
    </h1>
    <div style="text-align:center">
        <figure class="lead-figure">
            <img
            src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Sorting_quicksort_anim.gif/220px-Sorting_quicksort_anim.gif">
        </figure>
    </div>

    <details>
        <summary class="sum1">
           Algorithms 
        </summary>
        <details>
            <summary class="sum2">
                Overview
            </summary>
            <p>
               An <b>algorithm</b> is a finite
               sequence of precise instructions 
               for performing a computation or for solving a problem.
            </p>

            <p>
               Algorithm for finding the maximum (largest) value in a finite 
               sequence of integers:
               Solution Steps:
            </p>

            <ol class="nested">
                <li>
                    Set the temporary maximum equal 
                    to the first integer in 
                    the sequence.
                </li>
                <li>
                    Compare the next integer in the 
                    sequence to the temporary 
                    maximum, and if it is larger than the 
                    temporary maximum, set the 
                    temporary maximum equal to this integer.
                </li>
                <li>
                    Repeat the previous step if there 
                    are more integers in the
                    sequence.
                </li>
                <li>
                    Stop when there are no integers 
                    left in the sequence. 
                    The temporary maximum at this point 
                    is the largest integer in 
                    the sequence.
                </li>
            </ol>
            <p>
              Properties of an Algorithm
            </p>

            <ol class="nested">
                <li>
                    Input
                </li>
                <li>
                    Output
                </li>
                <li>
                    Definitiveness
                </li>
                <li>
                    Correctness
                </li>
                <li>
                    Finiteness
                </li>
                <li>
                    Effectiveness
                </li>
                <li>
                    Generality
                </li>
            </ol>
        </details>
        <details>
            <summary class="sum2">
                Searching Algorithms 
            </summary>
            <p>
                The problem of locating an element 
                in an ordered list occurs in 
                many contexts. For instance, a program 
                that checks the spelling of 
                words searches for them in a dictionary, 
                which is just an ordered 
                list of words. Problems of this kind are 
                called searching problems.
            </p>

            <details>
                <summary class="sum3">
                    Linear Search
                </summary>
                <figure>
                    <img src="https://www.tutorialspoint.com/data_structures_algorithms/images/linear_search.gif" 
                    alt="Linear Search Animation">
                </figure>
                <p>
                    <b>procedure</b> <i>linear search(x</i>: integer,
                    <i>a</i><sub>1</sub>, <i>a</i><sub>2</sub>, .
                    . . , <i>a<sub>n</sub></i>: distinct integers)<br>
                    <i>i := 1</i><br>
                    <b>while</b> (<i>i</i> &le; <i>n</i> 
                    and <i>x</i> != <i>a</i>[<i>i</i>] )<br>
                    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
                    <i>i</i> = <i>i</i> + 1
                    <br>
                    <b>if</b> <i>i</i> &le; <i>n</i> <b>then</b>
                    <i>location</i> := <i>i</i><br>
                    <b>else</b> <i>location</i> := 0
                    <br>
                    <b>return</b> <i>location</i> 
                    {<i>location</i> is the subscript of 
                    the term that equals <i>x</i>,
                    or is 0 if <i>x</i> is not found}
                </p>

            </details>
            <details>
                <summary class="sum3">
                    Binary Search
                </summary>
                <p>
                   This algorithm can be used when 
                   the list has terms occurring in 
                   order of increasing size (for instance: 
                   if the terms are numbers, 
                   they are listed from smallest to largest; 
                   if they are words, they 
                   are listed in lexicographic, or alphabetic, 
                   order). This second 
                   searching algorithm is called the binary search algorithm.
                   <br>
                </p>

                <figure>
                    <img 
                    src = "https://www.tutorialspoint.com/data_structures_algorithms/images/binary_search_0.jpg">
                    <br>
                    <img 
                    src = "https://www.tutorialspoint.com/data_structures_algorithms/images/binary_search_1.jpg">
                    <br>
                    <img
                    src = "https://www.tutorialspoint.com/data_structures_algorithms/images/binary_search_2.jpg">
                    <br>
                    <img 
                    src = "https://www.tutorialspoint.com/data_structures_algorithms/images/binary_search_3.jpg">
                    <br>
                    <img
                    src = "https://www.tutorialspoint.com/data_structures_algorithms/images/binary_search_4.jpg">
                    <br>
                    <img
                    src = "https://www.tutorialspoint.com/data_structures_algorithms/images/binary_search_5.jpg">
                    <br>
                    <img
                    src = "https://www.tutorialspoint.com/data_structures_algorithms/images/binary_search_6.jpg">
                </figure>
            </details>
        </details>
        <details>
            <summary class="sum2">
               Sorting Algorithms
            </summary>
            <details>
                <summary class="sum3">
                    Bubble Sort
                </summary>
                <figure>
                    <img src="http://www.opentechguides.com/images/howto/howto_5101.png">
                </figure>
                <p>
                    <b>Psuedocode</b>
                    <br>
                </p>
                <p>
                   <b>procedure</b>
                   <i>bubblesort</i>(<i>a</i><sub>1</sub>, <i>a</i><sub>2</sub>, .
                     . . , <i>a<sub>n</sub></i>: real numbers n &ge; 2)<br>
                    &nbsp; &nbsp; &nbsp; <b>for</b> ( <i>i := 1</i> to <i>n</i>-1)<br>
                     &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
                    <b>for</b> ( <i>j</i> to <i>n</i>-1) <br>
                    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
                     <b>if</b> <i>a</i> <sub> <i>j</i></sub> &gt;
                     <i>a</i><sub><i>j</i>+1</sub> <b>then</b>
                     interchange <i>a</i><sub><i>j</i></sub> and
                                <i>a</i><sub><i>j</i>+1</sub><br>
                    &nbsp; &nbsp; &nbsp; {<i>a</i><sub>1</sub>, . . . ,<i>a</i>
                                <sub>n</sub> is in increasing order}
                 </p>

            </details>
            <details>
                <summary class="sum3">
                    Insertion Sort
                </summary>

                <div class="input-group justify-content-around">
                    <p>
                    <button id="runButton" type="button"
                        class="btn btn-primary col-1"
                        onclick="sort()">Run</button>
                    <button id="stopButton" type="button"
                        class="btn btn-danger col-1"
                        onclick="stopAnime()">Stop</button>
                    <input id="myDelay" type="range"
                                        class="col-6 form-control-range"
                           min=100 max=1000 step=100 value=100
                           onchange="updateDelay()"/>
                    <label id="delayLbl" for="myDelay"
                        class="col-2 input-group-text">Delay: 100
                    </label>
                    </p>
    
                </div>
    
                <br/>
                <p>
                    <canvas id="canvas" width="800" height="144"
                        style="border:1px solid #000000"></canvas>
                </p>

                <script src="Algocynfas/algocynfas.js"></script>
                <script src="Algocynfas/insertion_sort.js"></script>
                <script src="Algocynfas/widgets.js"></script>
                <script>
                    var canvas = new fabric.Canvas('canvas');
                    var list = [7, 4, 6, 9, 2, 1, 12];
                    var fList = window.createList(canvas, list);
    
                    async function sort() {
                        animeRunning = true;
    
                        let runButton = document.getElementById("runButton");
                        runButton.disabled = true;
                        await window.insertionSort(fList);
                        runButton.disabled = false;
                    }
    
                    function stopAnime() {
                        animeRunning = false;
                    }
                </script>

                <p id="legend">
                    <script>
                        window.display_legend()
                    </script>
                </p>

                <p>
                   <b>procedure</b>
                   <b>insertionsort</b>(<i>a</i><sub>1</sub>, <i>a</i><sub>2</sub>, .
                   . . , <i>a</i><sub><i>n</i></sub>: real numbers <i>n </i>&ge; 2)<br>
                    &nbsp; &nbsp; &nbsp; <b>for</b> ( <i>j := 2</i> to <i>n</i>)<br>
                    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
                    <i>i</i> :&equals; 1 <br>

                    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
                    <b>while</b> <i>a</i> <sub> <i>j</i></sub> &gt;
                    <i>a</i><sub><i>i</i></sub> <br>
                     &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;
                     <i> i</i> :&equals; <i>i</i>+1<br>
                     &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
                     <i>m</i> :&equals; <i>a</i><sub><i>j</i></sub> <br>
                     &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;
                     <b>for</b> <i>k</i> :&equals; 0 to <i>j</i> &minus; <i>i</i> &minus; 1 <br>
                     &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
                     <i>a</i><sub><i>j</i></sub><sub>&minus;</sub><sub><i>k</i></sub>
                      :&equals;  <i>a</i><sub><i>j</i></sub>
                     <sub>&minus;</sub><sub><i>k</i></sub>
                     <sub> &minus; 1</sub> <br>
                     &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
                     <i>a</i><sub><i>i</i></sub> :&equals; <i>m</i> <br>
                         &nbsp; &nbsp; &nbsp;{<i>a</i><sub>1</sub>, . . . ,
                         <i>a</i><sub><i>n</i></sub>}
                </p> 
            </details>
        </details>
        <details>
            <summary class="sum2">
                Greedy Algorithms
            </summary>
            <p>
                Algorithms that make what seems to be the best
                choice at each step are called <b>greedy algorithms.</b>
                <br>
                <b>Greedy Change-Making Algorithm</b>
                <br>
            </p>

            <figure>
                <img src="graphics/GreedyChangeMaking.svg.png">
            </figure>
            <p class="def">
                LEMMA 1
            </p>

            <p>
                If n is a positive integer, 
                then <i>n</i> cents in change using 
                quarters, dimes, nickels, and pennies 
                using the fewest coins possible 
                has at most two dimes, at most one nickel, 
                at most four pennies, and 
                cannot have two dimes and a nickel. 
                The amount of change in dimes, 
                nickels, and pennies cannot exceed 24 cents.
            </p>

            <p class="def">
               THEOREM 1
            </p>

            <p>
                The greedy algorithm produces change using the 
                fewest coins possible.
                <br>
            </p>

            <p>
                <b>Greedy Algorithm for Scheduling Talks</b>
            </p>

            <figure>
                <img src="graphics/GreedyScheduling.svg.png">
            </figure>
        </details>

        <details>
            <summary class="sum2">
                The Halting Problem
            </summary>
            <p>
                <b>The Halting Problem is Unsolvable</b><br>
            </p>

            <figure>
                <img src="graphics/HaltingProblem.svg.png">
            </figure>
            <p>
                <a href="http://www.lel.ed.ac.uk/~gpullum/loopsnoop.html">
                    Scooping the Loop Snooper
                </a>
            </p>


        </details>
<!--include quiz3.1.qhtm --!>
    </details>
    <details>
        <summary class="sum1">
            The Growth of Functions 
        </summary>
        <details>
            <summary class="sum2">
                Big-O Notation
            </summary>

            <p class="def">
                DEFINITION
            </p>

            <p>
                Let <i>f</i> and <i>g</i> be functions 
                from the set of integers
                or the set of real numbers to the set 
                of real numbers.We say that 
                <i>f</i>(<i>x</i>) is <i>O</i>(<i>g</i>(<i>x</i>)) if 
                there are constants <i>C</i> and 
                <i>k</i> such that |<i>f</i>(<i>x</i>)| 
                &le; <i>C</i>|<i>g</i>(<i>x</i>)|whenever 
                <i>x</i> &gt; <i>k</i>.
                <br>
                (This is read as "<i>f</i>(<i>x</i>)
                is big-oh of <i>g</i>(<i>x</i>).")
                <br>
                <b>Example 1 </b>
                Show that 
                <i>f</i>(<i>x</i>) = 7<i>x</i><sup>2</sup> is
                O(<i>x</i><sup>3</sup>).
                Take <i>C</i> = 1 and <i>k</i> 
                = 7 as witnesses to establish
                that 7<i>x<sup>2</sup></i>  
                is <i>O</i>(<i>x</i><sup>3</sup>).
                <br>
                When <i>x</i> &gt; 7, 
                7<i>x</i><sup>2</sup> &lt; <i>x</i><sup>3</sup>.
                <br>
                Consequently, we can take 
                <i>C</i>= 1 and <i>k</i> = 7 as
                witnesses to establish the 
                relationship 7<i>x</i><sup>2</sup> is
                O(<i>x</i><sup>3</sup>).
                <br>
                Alternatively, when <i>x</i> 
                &gt; 1, we have 7<i>x</i><sup>2</sup> &lt;
                7<i>x</i><sup>3</sup>, 
                so that <i>C</i> = 7
                and <i>k</i> = 1 are also
                witnesses to the relationship
                7<i>x</i><sup>2</sup> is <i>O</i>(<i>x</i><sup>3</sup>).
            </p>

        </details>
        <details>
            <summary class="sum2">
                Big-O Estimates for Some Important Functions
            </summary>
            <p class="def">
                THEOREM 1
            </p>

            <p>
                Let <i>f</i>(<i>x</i>) =
                <i>a</i><sub><i>n</i></sub>
                <i>x</i><sup><i>n</i></sup> +
                <i>a</i><sub><i>n</i> &minus;
                    1</sub><i>x</i><sup><i>n</i>
                   &minus; 1</sup> +...+ 
                <i>a<sup>x</sup></i> + <i>a</i>, 
                where <i>a</i><sub>0</sub>, 
                <i>a</i><sub>1</sub>...
                <i>a</i><sub><i>n</i> &minus; 1</sub>, 
                <i>a</i><sub><i>n</i></sub> are real numbers.
                Let <i>f</i>(<i>x</i>) =
                <i>a</i><sub><i>n</i></sub><i>x</i><sup><i>n</i></sup> +
                <i>a</i><sub><i>n</i> &minus;
                    1</sub><i>x</i><sup>n &minus;1</sup>
                +...+ <i>a</i><i>x</i> + <i>a</i>,
                where <i>a</i><sub>0</sub>, 
                <i>a</i><sub>1</sub>...
                <i>a</i><sub><i>n</i> &minus; 1</sub>, 
                <i>a</i><sub><i>n</i></sub> are real numbers.
                <br>
                Then <i>f</i>(<i>x</i>) is
                <i>O</i>(<i>x</i><sup><i>n</i></sup>).
                <br>
                <b>A Display of the Growth 
                of Functions Commonly Used in Big-O
                Estimates.</b>
                <br>
            </p>

            <figure>
                <img src="graphics/BigOEstimates.svg.png">
            </figure>
        </details>
        <details>
            <summary class="sum2">
                The Growth of Combinations of Functions
            </summary>
            <p class="def">
                THEOREM 2
            </p>

            <p>
                Suppose that <i>f</i><sub>1</sub>(<i>x</i>) is
                <i>O(g</i><sub>1</sub>(<i>x</i>)) and that 
                <i>f</i><sub>2</sub>(<i>x</i>) 
                is <i>O(g</i><sub>2</sub>(<i>x</i>)).<br> 
                Then (<i>f</i><sub>1</sub>  
                + <i>f</i><sub>2</sub>)
                (<i>x</i>) is <i>O</i>
                (max(|<i>g</i><sub>1</sub>
                (<i>x</i>)|, |<i>g</i><sub>2</sub>(<i>x</i>)|)).
            </p>

            <p class="def">
                COROLLARY 1
            </p>

            <p>
                Suppose that <i>f</i><sub>1</sub>(<i>x</i>) and 
                <i>f</i><sub>2</sub>(<i>x</i>) 
                are both <i>O</i>(<i>g</i>(<i>x</i>)).
                <br>
                Then (<i>f</i><sub>1</sub> + 
                <i>f</i><sub>2</sub>)(<i>x</i>) is 
                <i>O</i>(<i>g</i>(<i>x</i>)).
            </p>

            <p class="def">
                THEOREM 3
            </p>

            <p>
                Suppose that <i>f</i><sub>1</sub>(<i>x</i>)
                is <i>O</i>(<i>g</i><sub>1</sub>(<i>x</i>)) 
                and <i>f</i><sub>2</sub>(<i>x</i>) 
                is <i>O(g</i><sub>2</sub>(<i>x</i>)).
                <br>
                Then (<i>f</i><sub>1</sub><i>f</i><sub>2</sub>)
                (<i>x</i>) is 
                <i>O(g</i><sub>1</sub>(<i>x)g</i><sub>2</sub>(<i>x</i>)).
            </p>

        </details>
        <details>
            <summary class="sum2">
                Big-Omega and Big-Theta Notation
            </summary>
            <p class="def">
                DEFINITION 2
            </p>

            <p>
                Let <i>f</i> and <i>g</i> be 
                functions from the set of integers 
                or the set of real numbers to 
                the set of real numbers.We say that 
                <i>f</i>(<i>x</i>) is <i>&#937</i>;
                (<i>g</i>(<i>x</i>) if there are positive constants 
                <i>C</i> and <i>k</i> such that |<i>f</i>(<i>x</i>)| &ge; 
                <i>C</i>|<i>g</i>(<i>x</i>)|
                whenever <i>x</i> &gt; <i>k</i>.
                <br>
                (This is read as "<i>f</i>(<i>x</i>
                is big-Omega of <i>g</i>(<i>x</i>.")
                <br>
                <b>Example: </b>Show that 
                <i>f</i>(<i>x</i>) = <i>x<sup>3</sup></i> is 
                &Omega;(7<i>x</i><sup>2</sup>).
                <ul class="nested">
                    <li>
                        In the above example we have 
                        proved the exact opposite.
                    </li>
                    <li>
                        Consider the same witness <i>C</i> =1
                        and <i>k</i> = 7 to establish this relation
                    </li>
                    <li>
                        Just by turning in inequality,
                        we can say that f(x) is &Omega;
                        (7<i>x</i><sup>2</sup>)
                        we can say that <i>f</i>(<i>x</i> is 
                        &Omega;(7<i>x</i><sup>2</sup>)
                    </li>
                </ul>
            </p>

            <p class="def">
                DEFINITION 3
            </p>

            <p> 
                Let <i>f</i> and <i>g</i> be 
                functions from the set of integers 
                or the set of real numbers to 
                the set of real numbers.We say that
                <i>f</i>(<i>x</i>) is <i>&theta;</i>(<i>g</i>(<i>x</i>))
                if <i>f</i>(<i>x</i>) is <i>O</i>(<i>g</i>(<i>x</i>) 
                and <i>f</i>(<i>x</i>) is <i>&#937;(</i><i>g</i>(<i>x</i>)). 
                When <i>f</i>(<i>x</i>)is 
                <i>&#920;(<i>g</i>(<i>x</i>))</i> we say that <i>f</i> 
                is big-Theta of <i>g</i>(<i>x</i>), 
                that <i>f</i>(<i>x</i>) is of order <i>g</i>(<i>x</i>), 
                and that <i>f</i>(<i>x</i>) and 
                <i>g</i>(<i>x</i>) are of the same order.
                <br>
                <b>Example:</b> Show that 3<i>x</i><sup>2</sup>+ 8<i>x</i> 
                log <i>x</i> is &Theta;(<i>x</i><sup>2</sup>).
            </p>

            <ul class="nested">
                <li>
                   Because 0 &le; 8<i>x</i> log 
                   <i>x</i> &le; 8<i>x</i><sup>2</sup>, 
                   it follows that 3<i>x</i><sup>2</sup> 
                   + 8<i>x</i> log <i>x</i> 
                   &le; 11<i>x</i><sup>2</sup> for <i>x</i> &gt; 1.
                </li>
                <li>
                    Consequently, 3<i>x</i><sup>2</sup> 
                    + 8<i>x</i> log <i>x</i> is 
                    O(<i>x</i><sup>2</sup>). 
                </li>
                <li>
                    Clearly, <i>x</i><sup>2</sup> is
                    O(3<i>x</i><sup>2</sup> + 8<i>x</i> 
                    log <i>x</i>).
                    Let <i>f</i> and <i>g</i> be 
                    functions from the set of integers 
                    or the set of real numbers to the set 
                    of real numbers.We say that
                    <i>f(x)</i> is <i>&#920;(g(x))</i> if 
                    <i>f(x)</i> is <i>O(g(x))</i> 
                    and <i>f(x) </i>is <i>&#937;(g(x))</i>. 
                    When <i>f(x)</i> is 
                    <i>&#920;(g(x))</i> we say that <i>f</i>
                    is big-Theta of <i>g(x)</i>, 
                    that <i>f(x)</i> is of order <i>g(x)</i>, 
                    and that <i>f(x)</i> and 
                    <i>g(x)</i> are of the same order.
                    <br>
                    <b>Example:</b> Show that 3<i>x<sup>2</sup></i> + 8<i>x</i> 
                    log <i>x</i> is &Theta;(<i>x</i><sup>2</sup>).
                </li>
            </ul>

            <ul class="nested">
                <li>
                    Because 0 &le; 8<i>x</i> log <i>x</i>
                    &le; 8<i>x<sup>2</sup></i>, 
                    it follows that 3<i>x<sup>2</sup></i>
                    + 8<i>x</i> log <i>x</i> 
                    &le; 11<i>x<sup>2</sup></i> for <i>x</i> &gt; 1.
                </li>
                <li>
                   Consequently, 3<i>x<sup>2</sup></i>
                   + 8<i>x</i> log <i>x</i> is 
                   O(<i>x<sup>2</sup></i>). 
                </li>
                <li>
                    Clearly, <i>x</i><sup>2</sup> is
                    O(3<i>x</i><sup>2</sup> + 8<i>x</i> log <i>x</i>).
                </li>
                <li>
                    Consequently, 3<i>x</i><sup>2</sup> + 
                    8<i>x</i> log <i>x</i> is
                    <i>&Theta;(x</i><sup>2</sup>).
                </li>
            </ul>
            <p class="def">
                THEOREM 4
            </p>

            <p>
                Let <i>f</i>(<i>x</i>) =
                <i>a</i><sub><i>n</i></sub>x<sup><i>n</i></sup> +
                <i>a</i><sub><i>n</i>-1</sub><i>x</i><sup><i>n</i> &minus;
                    1</sup>
                +...+ <i>a</i><sub>1</sub>
                + <i>a</i><sub>0</sub>, where <i>a</i><sub>0</sub>,
                <i>a</i><sub>1</sub>, . . . , 
                an are real numbers
                with <i>a</i><sub><i>n</i></sub> &ne; 0.
                <i>a</i><sub><i>n</i> &minus; 
                1</sub> <i>x</i> <sup> <i>n</i> - 1</sup>
                + . . .  + <i>a</i><sub>1</sub><i>x</i>
                + <i>a</i><sub>0</sub>, where <i>a</i><sub>0</sub>,
                <i>a</i><sub>1</sub>, . . . , 
                <i>a</i><sub><i>n</i></sub> are real numbers
                with <i>a</i><sub><i>n</i></sub> <i>&ne;</i> 0.
                <br>
                Then <i>f</i>(<i>x</i>) is of 
                order <i>x</i><sup><i>n</i></sup>.
            </p>

        </details>

        <details>
            <summary class="sum2">
                More on the Growth of Functions
            </summary>
            <p>
                <a
                href="https://gcallah.github.io/algorithms/GrowthOfFunctions.html">
                Algorithms class lecture
                </a>
                on the growth of functions.
            </p>

        </details>
     <!--include quiz3.2.qhtm --!>
    </details>
    <details>
        <summary class="sum1">
           Complexity of Algorithms 
        </summary>
        <details>
            <summary class="sum2">
                Time Complexity
            </summary>
            <p>
                An analysis of the time required 
                to solve a problem of a particular 
                size involves the time complexity 
                of the algorithm.The time complexity of 
                an algorithm can be expressed 
                in terms of the number of operations 
                used by the algorithm when 
                the input has a particular size.
                <br>
                In most of the cases we consider 
                the worst-case time complexity of an 
                algorithm. This provides an upper
                bound on the number of operations an 
                algorithm uses to solve a problem
                with input of a particular size.
                <br>
                <br>
                <b>Complexity Analysis of Some Algorithms</b>
                <br>
                <b>Example:</b>
                Describe the time 
                complexity of an Algorithm for finding 
                the maximum element in a finite set of integers.
                An analysis of the time required to
                solve a problem of a particular 
                size involves the time 
                complexity of the algorithm.
                The time complexity of 
                an algorithm can be expressed in 
                terms of the number of operations 
                used by the algorithm when the 
                input has a particular size.
                <br>
                In most of the cases we consider the
                worst-case time complexity of an 
                algorithm. This provides an upper bound
                on the number of operations an 
                algorithm uses to solve a problem 
                with input of a particular size.
                <br>
                <br>
                <b>Example:</b>
                Describe the 
                time complexity of an Algorithm
                for finding the maximum element 
                in a finite set of integers.
            </p>

            <ul class="nested">
                <li>
                    Count the number of comparisons
                </li>
                <li>
                    There are  <i>n</i> comparisons  while 
                    entering the for loop, one extra when i
                    becomes equal to <i>n</i>
                </li>
                <li>
                    There are <i>n</i> - 1 comparison in 
                    the if loop to check the maximum element
                </li>
                <li>
                    The total comparison will be 
                    <i>n</i> + (<i>n</i> &minus; 1)<br>
                    2(<i>n</i> &minus; 1) &minus; 1 = 2<i>n</i> &minus; 1 comparisons are made
                    There are <i>n</i> comparisons checking the
                    termination condition of the for loop.
                </li>
                <li>
                    There are <i>n</i> &minus; 1 comparison in the if
                    statement to check the maximum element.
                    </li>
                <li>
                    The total comparisons will be
                    <i>n</i> + (<i>n</i> &minus; 1)
                    = 2<i>n</i> &minus; 1.
                </li>
                <li>
                    Hence, the complexity 
                    will be <i>&Theta;</i>(<i>n</i>)
                </li>
            </ul>       

        </details>

        <details>
            <summary class="sum2">
                Complexity of Matrix Multiplication
            </summary>
            <p>
                The definition of the product 
                of two matrices can be expressed as an
                algorithm for computing the 
                product of two matrices. Suppose that 
                <b>C</b> = [<i>c<sub>ij</sub></i>] is the
                <i>m</i> &#x2715; <i>n</i> matrix that is the 
                product of the <i>m &#x2715; k</i> 
                matrix <b>A</b> = [<i>a<sub>ij</sub></i>] 
                and the <i>k</i> &#x2715; <i>n</i> matrix 
                <b>B</b> = [<i>b<sub>ij</sub></i> ].
                The definition of the product of two matrices can
                be expressed as an
                algorithm for computing the product of
                two matrices. Suppose that 
                <b>C</b> = [<i>c<sub>ij</sub></i>]
                is the <i>m &#x2715; n</i> matrix that is the 
                product of the <i>m &#x2715; k</i>
                matrix <b>A</b> = [<i>a<sub>ij</sub></i>] 
                and the <i>k</i> &#x2715; <i>n</i>
                matrix <b>B</b> = [<i>b<sub>ij</sub></i> ].
                <br>
                <b>Pseudocode Matrix Multiplication</b>
                <br>
            </p>

            <figure>
                <img src="graphics/MatrixMultiplication.svg.png">
            </figure>

            <p>
                <b>Complexity Calculation</b>
                How many additions of integers and 
                multiplications of integers are used 
                by the matrix multiplication algorithm 
                to multiply two <i>n</i> * <i>n </i>matrices.
            </p>

            <ul class="nested">
                <li>
                    There are a total of <i>n</i><sup>2</sup>
                    elements in the product matrix.
                </li>

                <li>
                    Each element requires <i>n</i> multiplications 
                    and <i>n</i> &minus; 1 additions.
                    How many additions of integers and multiplications
                    of integers are used 
                    by the matrix multiplication algorithm to multiply
                    two <i>n</i> * <i>n</i> matrices.
                </li>

                <li>
                    Hence, the complexity of matrix 
                    multiplication is <i>O</i>(<i>n</i><sup>3</sup>).  
                    Hence, the complexity of matrix
                    multiplication is <i>O</i>(<i>n</i><sup>3</sup>).  
                </li>
            </ul>

        </details>

        <details>
            <summary class="sum2">
                Algorithmic Paradigms
            </summary>

            <p>
                Algorithm Paradigms is a general 
                approach based on a particular concept 
                that can be used to construct algorithms 
                for solving a variety of problems.
                Greedy Algorithm, Divide-and-Conquer Algorithm, 
                Brute Force Algorithm, and Probabilistic 
                Algorithm are algorithm paradigms.
                <br>
                <br>
                <b>Example:</b> 
                Brute Force Algorithms
                <br>
                A brute-force algorithm is solved in the most
                straightforward manner,
                without taking advantage of any ideas
                that can make the algorithm more efficient.
                Construct a brute-force algorithm for finding
                the closest pair of 
                points in a set of <i>n</i> points in the
                plane and provide a worst-case 
                estimate of the number of arithmetic operations.
                <br>
                <br>
                <b>Pseudocode for Brute-Force Closest Point Algorithm</b>
                <br>
            </p>

            <figure>
                <img src="graphics/ClosestPairAlgorithm.svg.png">
            </figure>

            <p>
                <b>Complexity of the Algorithm</b>
                <br>
                The algorithm loops through 
                <i>n</i>(<i>n</i> - 1)/2 pairs of 
                points, computes the value    
                (<i>x</i><sub><i>j</i></sub> - 
                <i>x<sub>i</sub></i>)<sup>2</sup>+ 
                (<i>y<sub>j</sub></i> - 
                <i>y<sub>i</sub>)</i><sup>2</sup>and 
                compares it with the minimum, etc.
                So, the algorithm uses
                <i> &Theta;(n</i><sup>2</sup>) 
                The algorithm loops through <i>n</i>(<i>n</i> &minus; 1)/2
                pairs of points, computes the value    
                (<i>x<sub>j</sub></i> &minus;
                <i>x</i><sub><i>i</i></sub>)<sup>2</sup> + 
                (<i>y</i><sub><i>j</i></sub> &minus;
                <i>y</i><sub><i>i</i></sub>)<sup>2</sup> and 
                compares it with the minimum, etc. So, the algorithm uses
                <i> &Theta;</i>(<i>n</i><sup>2</sup>)
                arithmetic and comparison operations.
            </p>
        </details>

        <details>
            <summary class="sum2">
                Understanding the Complexity of Algorithms
            </summary>
            <table>
                <tr>
                    <th class="table-head" colspan="2">
                        Commonly Used Terminology 
                        for the Complexity of Algorithms.
                    </th>
                </tr>
                <tr>
                    <th>
                        Complexity
                    </th>
                    <th>
                        Terminology
                    </th>
                </tr>
                <tr>
                    <td>
                        &Theta;(1)
                    </td>
                    <td>
                        Constant Complexity
                    </td>
                </tr>
                <tr>
                    <td>
                        &Theta;(log <i>n</i>)
                    </td>
                    <td>
                        Logarithmic Complexity
                    </td>
                    </tr>
                    <tr>
                    <td>
                        &Theta;(<i>n</i>)
                    </td>
                    <td>
                        Linear Complexity
                    </td>
                </tr>
                <tr>
                    <td>
                        &Theta;(<i>n</i> log <i>n</i>)
                    </td>
                    <td>
                        Linearithmic complexity
                    </td>
                </tr>
                <tr>
                    <td>
                        &Theta;(<i>n<sup>b</sup></i>)
                    </td>
                    <td>
                        Polynomial complexity
                    </td>
                </tr>
                <tr>
                    <td>
                        &Theta;(<i>b<sup>n</sup></i>) where <i>b</i> &gt;1
                    </td>
                    <td>
                        Exponential Complexity
                    </td>
                </tr>
                <tr>
                    <td>
                        &Theta;(<i>n!</i>)
                    </td>
                    <td>
                        Factorial Complexity
                    </td>
                </tr>
            </table>

            <p>
                <b>Tractable problem: </b>a problem 
                for which there is a worst-case
                polynomial-time algorithm that solves it
                <br>
                <b>Intractable problem: </b>a 
                problem for which no worst-case
                polynomial-time algorithm exists for solving it
                <br>
                <b>Solvable problem: </b>a problem 
                that can be solved by an algorithm
                <br>
                <b>Unsolvable problem: </b>a problem 
                that cannot be solved by an
                algorithm
            </p>

        </details>
     <!--include quiz3.3.qhtm --!>  
     </details>
 
</body>
</html>


