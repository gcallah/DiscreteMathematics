<html>
    <head>
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <title>
            Graphs
        </title>
    </head>

    <body>

<!--include menu.txt -->

        <h1 class="chap-title">
            Graphs
        </h1>
            <div style="text-align:center">
                <figure class="lead-figure">
                    <img
                        src="https://upload.wikimedia.org/wikipedia/en/5/52/London_Tube_Map.png">
                </figure>
            </div>

            <details>
                <summary class="sum1">
                Graphs and Graph Models
                </summary>

                <details>
                <summary class="sum2">
                Graphs
                </summary>

                <p>
                <b>Definition 1:</b><br>
                A graph <b><i>G</i> = (<i>V</i>, <i>E</i>)</b>
                consists of <i>V</i>,
                a nonempty set of vertices (or nodes) and <i>E</i>,
                a set of edges. Each edge has either one or
                two vertices associated with it,
                called its endpoints. An edge is said 
                to connect its endpoints.
                </p>
                <p>
                <b>Definition 2:</b><br>
                A <i>directed graph (or digraph)</i> <b>(<i>V</i>,
                <i>E</i>)</b> consists of a nonempty set of vertices <i>V</i>
                and a set of directed edges (or arcs) <i>E</i>.
                Each directed edge is associated with
                an ordered pair of vertices.
                 The directed edge associated with the <i>ordered pair</i>
                 <b>(<i>u</i>, <i>v</i>)</b> is said to start at
                 <i>u</i> and end at <i>v</i>.
                </p>

                <details>
                    <summary class="sum3">
                       Graph Terminology
                    </summary>

                <table style="width:80%">
                    <tr>
                        <th>Type</th>
                        <th>Edges</th>
                        <th>Multiple Edges Allowed
                            <br />
                            Between Two Vertices?</th>
                        <th>Loops Allowed?</th>
                     </tr>
                    <tr>
                        <td>Simple Graph</td>
                        <td>Undirected</td>
                        <td>No</td>
                        <td>No</td>
                    </tr>
                    <tr>
                        <td>Multigraph</td>
                        <td>Undirected</td>
                        <td>Yes</td>
                        <td>No</td>
                    </tr>
                    <tr>
                        <td>Pseudograph</td>
                        <td>Undirected</td>
                        <td>Yes</td>
                        <td>Yes</td>
                    </tr>
                    <tr>
                        <td>Simple Directed Graph</td>
                        <td>Directed</td>
                        <td>No</td>
                        <td>No</td>
                    </tr>
                    <tr>
                        <td>Directed Multigraph Graph</td>
                        <td>Directed</td>
                        <td>Yes</td>
                        <td>Yes</td>
                    </tr>
                    <tr>
                        <td>Mixed Graph</td>
                        <td>Directed and Undirected</td>
                        <td>Yes</td>
                        <td>Yes</td>
                    </tr>
                </table>

                </details>

                </details>

                <details>
                    <summary class="sum2">
                    Graph Models
                    </summary>


                    <details>
                        <summary class="sum3">
                        Social Networks
                        </summary>
                        <figure>
                            <img
                            src="https://upload.wikimedia.org/wikipedia/commons/4/47/Diagram_of_a_social_network.jpg"
                            width="25%">
                            <figcaption>
                                A social network
                            </figcaption>
                        </figure>
                        <p>
                        Examples: Acquaintanceship (Friendship Graphs),
                        Influence Graphs, Collaboration Graphs.
                        </p>

                    </details>

                    <details>
                        <summary class="sum3">
                        Communication Networks
                        </summary>
                        <figure>
                            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/dc/Jersey_Telecom_switchboard_and_operator.jpg/500px-Jersey_Telecom_switchboard_and_operator.jpg"
                            width="33%">
                            <figcaption>
                                A telephone switchboard
                            </figcaption>
                        </figure>
                        <p>
                        Examples: Call Graphs
                        </p>
                    </details>

                    <details>
                        <summary class="sum3">
                        Information Networks
                        </summary>
                        <p>
                        Examples: The Web Graph, Citation Graphs.
                        </p>
                    </details>

                    <details>
                        <summary class="sum3">
                        Software Design Applications
                        </summary>
                        <p>
                        Examples: Module Dependency Graphs,
                        Precedence Graphs and Concurrent Processing.
                        </p>
                    </details>

                    <details>
                        <summary class="sum3">
                        Transportation Networks
                        </summary>
                        <p>
                        Examples: Airline Routes,  Road Networks.
                        </p>
                    </details>

                    <details>
                        <summary class="sum3">
                        Biological Networks
                        </summary>
                        <figure>
                            <img src="https://upload.wikimedia.org/wikipedia/commons/e/ea/Genetic_interactions_between_Ras_signalling_and_chromatin_remodelling-A.jpg"
                            width="34%">
                            <figcaption>
                                Protein-protein interactions
                            </figcaption>
                        </figure>
                        <p>
                        Examples: Niche Overlap Graphs in Ecology,
                        Protein Interaction Graphs.
                        </p>
                    </details>

                    <details>
                        <summary class="sum3">
                        Tournaments
                        </summary>
                        <figure>
                            <img src="graphics/bracket.png"
                                width="28%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        Examples: Round-Robin Tournaments,
                        Single-EliminationTournaments.
                        </p>
                    </details>

                </details>

            </details>

            <details>
                <summary class="sum1">
                Graph Terminology and Special Types of Graphs
                </summary>

                <details>
                    <summary class="sum2">
                       Basic Terminology
                    </summary>

                    <details>
                    <summary class="sum3">
                       Definition 1:
                    </summary>
                        <p>
                        Two vertices <i>u</i> and <i>v</i>
                        in an undirected graph <i>G</i>
                        are called <i>adjacent</i>
                        (or neighbors) in <i>G</i> if <i>u</i>
                        and <i>v</i> are endpoints
                        of an edge <i>e</i> of <i>G</i>.
                        Such an edge <i>e</i> is called
                        <i>incident </i>with the vertices <i>u</i>
                        and <i>v</i> and <i>e</i> is said to
                        <i>connect</i> <i>u</i> and <i>v</i>.
                        </p>

                    </details>

                    <details>
                    <summary class="sum3">
                       Definition 2:
                    </summary>
                        <p>
                       The set of all neighbors of a vertex v of
                       <i>G</i> = (<i>V</i>, <i>E</i>),
                       denoted by <i>N</i>(<i>v</i>), is called the
                       <i> neighborhood</i>
                       of <i>v</i>. If <i>A</i>
                       is a subset of <i>V</i>,
                       we denote by <i>N</i>(<i>A</i>) the set of
                       all vertices in <i>G</i> that are
                       adjacent to at least one vertex
                       in <i>A</i>. So, <i>N</i>(<i>A</i>)
                       = <b>&cup;</b><sub>v &isin; A</sub>
                       <i>N(v)</i>.
                        </p>

                    </details>

                    <details>
                    <summary class="sum3">
                       Definition 3:
                    </summary>
                        <p>
                       The<i> degree of a vertex in an undirected graph</i>
                        is the number of edges incident with it, except
                        that a loop at a vertex contributes
                        twice to the degree of that vertex. The degree of the
                        vertex <i>v</i> is denoted by deg(<i>v</i>).
                        </p>

                    </details>


                    <details>
                    <summary class="sum3">
                       Theorem 1:
                    </summary>
                        <p>
                        <b> The Handshaking Theorem:</b>

                       Let <i>G</i> = (<i>V</i>, <i>E</i>)
                       be an undirected graph with <i>m</i>
                       edges. Then<br>
                       2<i>m</i> = &sum;
                       <sub><i>v</i> &isin; <i>V</i></sub>
                       deg(<i>v</i>).<br>
                       (Note that this applies even if multiple
                       edges and loops are present.)

                        </p>

                    </details>

                    <details>
                    <summary class="sum3">
                       Theorem 2:
                    </summary>
                        <p>
                        An undirected graph has an even number
                         of vertices of odd degree.
                         <br />
                         Let's try proving this by induction.
                        </p>

                    </details>

                    <details>
                    <summary class="sum3">
                       Definition 4:
                    </summary>
                        <p>
                       When (<i>u</i>, <i>v</i>) is an edge of the
                       graph <i>G</i> with directed edges,
                        <i>u</i> is said to be <i>adjacent</i>
                        to <i>v</i> and <i>v</i>
                        is said to be<i> adjacent</i> from <i>u</i>.
                        The vertex <i>u</i> is called the
                        <i>initial vertex</i> of (<i>u</i>, <i>v</i>),
                        and <i>v</i> is called
                        the <i>terminal</i>
                        or <i>end vertex</i> of (<i>u</i>, <i>v</i>).
                        The initial vertex and terminal
                        vertex of a loop are the same.
                        </p>

                    </details>

                    <details>
                    <summary class="sum3">
                       Definition 5:
                    </summary>
                        <p>
                       In a graph with directed edges the
                       <i>in-degree</i> of a vertex <i>v</i>,
                        denoted by deg<sup>-</sup>(<i>v</i>), is the number
                   of edges with <i>v</i> as their terminal vertex.
                   The <i>out-degree</i> of <i>v</i>,
                    denoted by deg<sup>+</sup>(<i>v</i>), is the
                   number of edges with <i>v</i> as their initial vertex.
                   <br>
                    (Note that a loop at a vertex contributes 1 to
                   both the in-degree and the out-degree of this vertex.)
                        </p>

                    </details>

                    <details>
                    <summary class="sum3">
                       Theorem 3:
                    </summary>
                        <p>

                        Let <i>G</i> = (<i>V</i>, <i>E</i>) be a graph
                        with directed edges. Then<br>
                        &sum;<sub><i>v</i> &isin; <i>V</i></sub>
                        deg<sup>-</sup>(<i>v</i>) =
                        &sum;<sub><i>v</i> &isin; <i>V</i></sub>
                        deg<sup>+</sup>(<i>v</i>) = |<i>E</i>|

                        </p>

                    </details>
                </details>

                <details>
                    <summary class="sum2">
                       Some Special Simple Graphs
                    </summary>

                    <details>
                    <summary class="sum3">
                        Complete Graphs
                    </summary>

                    <figure>
                        <img
                        src="graphics/graph1.gif"
                        height="300" width="400">
                        <figcaption>
                            A Complete Graph
                        </figcaption>
                    </figure>

                    <p>
                    <b>A complete graph on n vertices</b>,
                     denoted by K<sub>n</sub>, is a simple graph
that contains exactly one edge between
 each pair of distinct vertices.<br>
 A simple graph for which there is at least one
pair of distinct vertex not connected
 by an edge is called <b>noncomplete</b>.
</p>
                    </details>

                    <details>
                    <summary class="sum3">
                        Cycles
                    </summary>
                    <figure>
                        <img
                             src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Undirected_6_cycle.svg/320px-Undirected_6_cycle.svg.png"
                             width="33%">
                        <figcaption>
                            A cycle graph of length 6
                        </figcaption>
                    </figure>

                   <p>
                    <b>A cycle <i>C</i><sub><i>n</i></sub></b>,
                    <i>n</i> &ge; 3,
                    consists of <i>n</i> vertices
                    <i>v</i><sub>1</sub>,
                    <i>v</i><sub>2</sub>,...,
                    <i>v</i><sub><i>n</i></sub> and
                    edges
                    {<i>v</i><sub>1</sub>, <i>v</i><sub>2</sub>},
                    {<i>v</i><sub>2</sub>,
                    <i>v</i><sub>3</sub>}, ..., 
                    {<i>v</i><sub><i>n</i>&minus;1</sub>,
                     <i>v</i><sub><i>n</i></sub>},
                    and {<i>v</i><sub><i>n</i></sub>,
                    <i>v</i><sub>1</sub>}.
                    </p>
                    </details>


                    <details>
                    <summary class="sum3">
                        Wheels
                    </summary>

                    <figure>
                        <img
                        src="graphics/graph3.png"
                        height="250" width="400">
                        <figcaption>
                            Wheels
                        </figcaption>
                    </figure>

                    <p>
                     We obtain a <b>wheel W<sub>n</sub></b>
                      when we add an additional vertex
                       to a cycle C<sub>n</sub>, for n ≥ 3,
and connect this new vertex to each of the
n vertices in C<sub>n</sub>, by new edges.
                    </p>
                    </details>

                    <details>
                    <summary class="sum3">
                        n-Cubes
                    </summary>
                    <figure>
                        <img
                        src="graphics/graph4.gif"
                        height="250" width="400">
                        <figcaption>
                            n-Cubes
                        </figcaption>
                    </figure>

                    <p>
                     An <b>n-dimensional hypercube</b>, or <b>n-cube</b>,
                     denoted by Q<sub>n</sub>, is a graph that has vertices
representing the 2<sup>n</sup> bit strings of length n.
 Two vertices are adjacent if and only if the bit strings
that they represent differ in exactly one bit position.
                    </p>
                    </details>


                </details>



                <details>
                    <summary class="sum2">
                       Bipartite Graphs
                    </summary>

                    <details>
                    <summary class="sum3">
                       Definition 6:
                    </summary>
                        <p>
                    A simple graph G is called <i>bipartite</i> if
                    its vertex set V can be partitioned into two disjoint
sets V1 and V2 such that every edge in the graph
 connects a vertex in V1 and a vertex in V2
(so that no edge in G connects either two vertices
 in V1 or two vertices in V2). When this
condition holds, we call the pair (V1, V2)
a <i>bipartition </i>of the vertex set V of G.

                        </p>
                    </details>


                    <details>
                    <summary class="sum3">
                       Theorem 4:
                    </summary>
                        <p>
                        A simple graph is bipartite if and only if it is
                        possible to assign one of two different colors to
                        each vertex of the graph so that no two
                        adjacent vertices are assigned the same color.
                        </p>
                    </details>

                </details>

                <details>
                    <summary class="sum2">
                       Bipartite Graphs and Matchings
                    </summary>

                    <p class="def">
                        Definition:
                    </p>

                    <p>
                        A <i>matching</i> is a set of edges without common
                        vertices.
                    </p>

                    <p class="def">
                       Theorem 5:
                    </p>

                    <p>
                    <b>HALL'S MARRIAGE THEOREM</b> <br>
                    The bipartite graph <i>G</i> =
                    (<i>V</i>, <i>E</i>) with bipartition
                    (<i>V</i><sub>1</sub>, <i>V</i><sub>2</sub>) has
                    a complete matching from
                     <i>V</i><sub>1</sub> to
                     <i>V</i><sub>2</sub> if and only if
                     |<i>N</i>(<i>A</i>)| &ge; |<i>A</i>| for all subsets
                    <i>A</i> of <i>V</i><sub>1</sub>.
                    <br />
                    (<i>N</i>(<i>A</i>) is the neighborhood of <i>A</i>.)
                    </p>
                </details>

                <details>
                    <summary class="sum2">
                       Some Applications of Special Types of Graphs
                    </summary>

                    <figure>
                        <img
                        src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/84/Star_Topology.png/440px-Star_Topology.png"
                        height="300" width="400">
                        <figcaption>
                            A network with a star topology
                        </figcaption>
                    </figure>

                    <figure>
                        <img
                        src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/db/NetworkTopology-Ring.png/440px-NetworkTopology-Ring.png"
                        height="300" width="320">
                        <figcaption>
                            Ring network topology
                        </figcaption>
                    </figure>
                </details>


            <details>
                    <summary class="sum2">
                       New Graphs from Old
                    </summary>

                    <details>
                    <summary class="sum3">
                       Definition 7:
                    </summary>
                     <p>
                     A <i>subgraph</i> of a graph
                     <i>G</i> = (<i>V</i>, <i>E</i>)
                     is a graph <i>H</i> = (<i>W</i>, <i>F</i>), where
                     <i>W</i> &sube; <i>V</i> and
                     <i>F</i> &sube; <i>E</i>. A
                     subgraph <i>H</i> of <i>G</i> is a <i>proper
                     subgraph</i> of <i>G</i> if <i>H</i> &ne; <i>G</i>.
                     </p>


                    </details>

                    <details>
                    <summary class="sum3">
                       Definition 8:
                    </summary>
                     <p>
                     Let <i>G</i> = (<i>V</i>, <i>E</i>) be a simple graph.
                      The <i>subgraph induced</i> by a subset <i>W</i>
                      of the vertex set <i>V</i>
                is the graph (<i>W</i>, <i>F</i>)
                where the edge set <i>F</i>
                contains an edge in <i>E</i> if and only if both endpoints
                of this edge are in <i>W</i>.
                     </p>


                    </details>

                    <details>
                    <summary class="sum3">
                       Definition 9:
                    </summary>
                     <p>
                     The <i>union</i> of two simple graphs
                      G1 = (V1, E1) and
                      G2 = (V2, E2)
                      is the simple graph with
                    vertex set V1 &cup; V2
                    and edge set E1 &cup; E2.
                    The union of G1 and G2 is
                    denoted by G1 &cup; G2.
                     </p>


                    </details>

            </details>
        </details>

            <details>
                <summary class="sum1">
                Representing Graphs and Graph Isomorphism
                </summary>

                <details>
                    <summary class="sum2">
                       Representing Graphs
                    </summary>
                    <details>
                    <summary class="sum3">
                       Adjacency List
                    </summary>
                    <p>
                    <figure>
                        <img
                        src="graphics/graph5.png"
                        height="300" width="320">
                        <figcaption>
                            Example Simple Graph
                        </figcaption>
                    </figure>

                    <figure>
                        <img
                        src="graphics/graph6.png"
                        height="300" width="350">
                        <figcaption>
                            Adjacency List Representation of the above Graph
                        </figcaption>
                    </figure>

                    <figure>
                        <img
                        src="graphics/graph7.png"
                        height="350" width="700">
                        <figcaption>
                            Adjacency List Representation of the Directed Graph
                        </figcaption>
                    </figure>
                    </p>

                    </details>


                </details>

                <details>
                    <summary class="sum2">
                       Adjacency Matrices
                    </summary>


                    <p>
                    <figure>
                        <img
                        src="graphics/graph5.png"
                        height="300" width="320">
                        <figcaption>
                            Example Simple Graph
                        </figcaption>
                    </figure>

                    <figure>
                        <img
                        src="graphics/graph8.png"
                        height="300" width="350">
                        <figcaption>
                            Adjacency Matrix Representation of the above Graph
                        </figcaption>
                    </figure>

                    <figure>
                        <img
                        src="graphics/graph9.png"
                        height="350" width="750">
                        <figcaption>
                    Adjacency Matrix Representation of the Directed Graph
                        </figcaption>
                    </figure>
                    </p>

                </details>

                <details>
                    <summary class="sum2">
                       Incidence Matrices
                    </summary>
                    <p>
                    Let G = (V , E) be an undirected graph.
                    Suppose that v<sub>1</sub>, v<sub>2</sub>,...,
                    v<sub>n</sub> are the vertices and e<sub>1</sub>,
                    e<sub>2</sub>,...,e<sub>m</sub> are the edges
of G. Then the incidence matrix with respect to this
 ordering of V and E is the n × m matrix
M = [m<sub>ij</sub> ], where<br>
m<sub>ij</sub> = 1 when edge e<sub>j</sub>
is incident with v<sub>i</sub>,<br>
m<sub>ij</sub> = 0 otherwise.

                    <figure>
                        <img
                        src="graphics/graph10.png"
                        height="350" width="500">
                        <figcaption>
                    Example Graph
                        </figcaption>
                    </figure>
                    <figure>
                        <img
                        src="graphics/graph11.png"
                        height="250" width="500">
                        <figcaption>
                    Incidence Matrix for the graph
                        </figcaption>
                    </figure>
                    <figure>
                        <img
                        src="graphics/graph12.png"
                        height="650" width="750">
                        <figcaption>
                    Directed Graph and its Incidence Matrix
                        </figcaption>
                    </figure>


                    </p>

                </details>

                <details>
                    <summary class="sum2">
                       Isomorphisms of Graphs
                    </summary>

                    <details>
                    <summary class="sum3">
                       Definition 1:
                    </summary>
                    <p>
                    The simple graphs G<sub>1</sub> = (V<sub>1</sub>,
                    E<sub>1</sub>) and G<sub>2</sub> = (V<sub>2</sub>,
                     E<sub>2</sub>) are <i>isomorphic</i> if there exists
                     a oneto-one
and onto function <i>f</i> from V<sub>1</sub> to V<sub>2</sub> with the property
that a and b are adjacent in G<sub>1</sub> if
and only if <i>f (a)</i> and <i>f (b)</i> are adjacent in G<sub>2</sub>,
 for all a and b in V<sub>1</sub>. Such a function <i>f</i> is called
an<i> isomorphism</i>.
 Two simple graphs that are not isomorphic are called <i>nonisomorphic</i>.
                    </p>

                    </details>


                </details>

                <details>
                    <summary class="sum2">
                       Determining Whether Two Simple Graphs Are
                       Isomorphic
                    </summary>
                    <p>
                    It is difficult to show that two graphs are isomorphic. There are many possible one to one correspondences between the vertex sets of two simple graphs.There are n! possible mappings for graph with n vertices.
                    </p>
  <p>Instead of testing for each correspondence,we can show that two graphs are not isomorphic. If we can find only one property that only one of the two graphs has,then we can prove that thew graphs are not isomorphic</p>

                </details>

            </details>

            <details>
                <summary class="sum1">
                Connectivity
                </summary>


                <details>
                    <summary class="sum2">
                       Paths
                    </summary>

                    <figure>
                        <img
                        src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Thottu_Varambu.jpg/440px-Thottu_Varambu.jpg">
                        <figcaption>
                        </figcaption>
                    </figure>

                    <p>
                        A <i>path</i> through a graph is a sequence
                        of edges, starting at some vertex and moving
                        from vertex to vertex along edges.
                        <br />
                        A <i>simple path</i> cannot contain any edge
                        more than once.
                        <br />
                        <a href="https://en.wikipedia.org/wiki/Erdos_number">
                        Erd&ouml;s number
                        </a>
                        <br />
                        <a
                            href="https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon#Bacon_numbers">
                        Bacon number
                        </a>
                        <br />
                        <a
                            href="https://en.wikipedia.org/wiki/Erdos-Bacon_number">
                        Erd&ouml;s-Bacon number
                        </a>
                        <br />
                        <a
                            href="https://web.archive.org/web/20090419052903/http://www.math.uga.edu/research/UGAcollab.pdf">
                            Collaboration graph of UGa math department
                        </a>
                    </p>

                </details>

                <details>
                    <summary class="sum2">
                       Connectedness in Undirected Graphs
                    </summary>

                    <figure>
                        <img
                        src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f4/Network_Community_Structure.svg/440px-Network_Community_Structure.svg.png"
                        height="300" width="320">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                        A graph is <i>connected</i> if
                        there is a path from any vertex to
                        any other vertex.
                    </p>

                    <p>
                        A <i>connected component</i> of a graph is
                        a connected subgraph that is not a proper subgraph of
                        another connected component.
                    </p>

                </details>

                <details>
                    <summary class="sum2">
                        How Connected Is a Graph?
                    </summary>

                    <p>
                    <i>Cut vertices</i> or <i>articulation points</i>
                    <br />
                    <i>Vertex cuts</i> or <i>separating sets</i>
                    <br />
                    <i>Edge cuts</i>
                    </p>

                    <figure>
                        <img
                        src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/cb/Sample-graph.jpg/440px-Sample-graph.jpg">
                        <figcaption>
                            The dashed line signifies the edge that, if
                            removed, would split the graph into two connected
                            components.
                        </figcaption>
                    </figure>

                    <p>
                        The <i>edge connectivity</i> of a graph is its minimum
                        edge cut size.
                    </p>

                </details>

                <details>
                    <summary class="sum2">
                        Connectedness in Directed Graphs
                    </summary>

                    <details>
                        <summary class="sum3">
                         Definition 4:
                        </summary>
                               <p>
                                  A directed graph is strongly connected if there is a path from <i>a</i> to <i>b</i> and from <i>b</i> to <i>a</i> whenever <i>a</i> and <i>b</i> are vertices in                             the graph
                               </p>
                    </details>
                    <details>
                       <summary class="sum3">
                             Definition 5:
                      </summary>
                                 <p>
                                 A directed graph is weakly connected if there is a path between every two vertices in the underlying undirected graph
                                </p>
                    </details>
                </details>

                <details>
                    <summary class="sum2">
                        Paths and Isomorphism
                    </summary>
                    <p>
                      Paths and circuits can help in determining isomorphism.Length of circuit is a useful invariant in determining the isomorphism of two graphs, also mappings constructed using path can help in deciding isomorphism.
                    </p>
                    <figure>
                        <img
                        src="http://images.slideplayer.com/28/9296211/slides/slide_6.jpg"
                        height="300" width="320">
                        <figcaption>
                        </figcaption>
                    </figure>
                </details>

                <details>
                    <summary class="sum2">
                        Counting Paths Between Vertices
                        <br />
                        NOT COVERED SPRING 2018
                    </summary>
                </details>
            </details>

            <details>
                <summary class="sum1">
                Euler and Hamilton Paths
                </summary>

                <details>
                    <summary class="sum2">
                        Euler Paths and Circuits
                    </summary>

                    <p>
                        Can one take a walk that crosses each bridge
                        in K&ouml;nigsberg once and only once?
                    </p>

                    <details>
                        <summary class="sum3">
                            Euler Path
                        </summary>

                        <figure class="lead-figure">
                            <img
                            src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Konigsberg_bridges.png/220px-Konigsberg_bridges.png">
                            <figcaption>
                            The Bridges of K&ouml;nigsberg
                            </figcaption>
                        </figure>

                        <p>
                            Answer: No! For an <i>Eulerian path</i> to exist
                            through a graph, there must be zero or two nodes of
                            odd degree.
                        </p>

                        <figure>
                            <img
                            src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/K&ouml;nigsberg_graph.svg/360px-K&ouml;nigsberg_graph.svg.png"
                            height="240" width="280">
                            <figcaption>
                                The graph Euler used to solve the problem
                            </figcaption>
                        </figure>
                    </details>

                    <details>
                        <summary class="sum3">
                            Euler Circuit
                        </summary>

                        <p>
                            For there to be an <i>Eulerian circuit</i>, all
                            nodes must have even degree. That is both
                            a necessary and a sufficient condition.
                            <br />
                            This can be proved with a graph like the following:
                        </p>

                        <figure>
                            <img src="graphics/EulerCircuit.png">
                            <figcaption>
                            </figcaption>
                        </figure>
                    </details>
                </details>

                <details>
                    <summary class="sum2">
                        Hamilton Paths and Circuits
                    </summary>

                    <p>
                        A simple path that passes through each vertex
                        in a graph just once is called a <i>Hamilton
                        path</i>. A simple circuit that passes through
                        each vertex in a graph just once is called a
                        <i>Hamilton circuit</i>.
                    </p>

                    <figure>
                        <img
                        src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/60/Hamiltonian_path.svg/440px-Hamiltonian_path.svg.png"
                        height="320" width="320">
                        <figcaption>
                            A Hamilton circuit on a dodecahedron
                        </figcaption>
                    </figure>

                    <p>
                        There is no easy way to always detect Hamilton
                        circuits, but... a graph with a Hamilton circuit:
                    </p>
                    <ul>
                        <li>
                            Has no vertices of degree one.
                        </li>
                        <li>
                            Both edges of any vertex of degree two are in the
                            circuit.
                        </li>
                        <li>
                            All incidenet edges of a traversed vertex, except
                            those used building the circuit, can be dropped.
                        </li>
                        <li>
                            No Hamilton circuit contains a smaller circuit.
                        </li>
                        <li>
                            <i>K<sub>n</sub></i> has a Hamilton circuit
                            when <i>n</i> &ge; 3.
                        </li>
                    </ul>


                </details>

                <details>
                    <summary class="sum2">
                        Applications of Hamilton Circuits
                    </summary>

                    <p>
                        Gray codes
                    </p>

                    <figure>
                        <img
                        src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9b/Encoder_Disc_%283-Bit%29.svg/440px-Encoder_Disc_%283-Bit%29.svg.png"
                        height="320" width="320">
                        <figcaption>
                            Rotary encoder for angle-measuring devices
                        </figcaption>
                    </figure>
                </details>
            </details>

            <details>
                <summary class="sum1">
                Shortest-Path Problems
                </summary>

                <p>
                <a
                    href="https://www.cs.usfca.edu/~galles/visualization/Dijkstra.html">
                    Shortest path visualizer
                </a>
                </p>

                <details>
                    <summary class="sum2">
                        A Shortest Path Algorithm
                    </summary>

                    <p>
                        Discovered by Edsger Dijkstra.
                    </p>

                    <figure>
                        <img
                        src="https://upload.wikimedia.org/wikipedia/commons/5/57/Dijkstra_Animation.gif">
                        <figcaption>
                            Dijkstra's algorithm running
                        </figcaption>
                    </figure>

                    <p>
                    <code>
                        <pre>
1  function Dijkstra(Graph, source):
2
3      create vertex set Q
4
5      for each vertex v in Graph:     // Initialization
6          dist[v] = INFINITY      // Unknown distance from source to v
7          prev[v] = UNDEFINED     // Previous node in optimal path from source
8          add v to Q              // All nodes initially in Q
                                    //(unvisited nodes)
9
10      dist[source] = 0           // Distance from source to source
11
12      while Q is not empty:
13          u = vertex in Q with min dist[u]  // Node with the least distance
14                                            // will be selected first
15          remove u from Q
16
17          for each neighbor v of u:           // where v is still in Q.
18              alt = dist[u] + length(u, v)
19              if alt &lt; dist[v]:      // A shorter path to v has been found
20                  dist[v] = alt
21                  prev[v] = u
22
23      return dist[], prev[]
                        </pre>
                    </code>
                    </p>
                </details>

                <details>
                    <summary class="sum2">
                        The Traveling Salesperson Problem
                    </summary>

                    <p>
                        How to route our salesperson around their 10
                        stops at minimum cost?
                        <br />
                        Equivalent to finding all Hamiltonian circuits
                        starting at City 1.
                        <br />
                        That number will be (<i>n</i> - 1)! / 2,
                        which grows very fast.
                        <br />
                        For 12 cities, it will be around
                        20 million circuits
                        to try.
                        <br />
                        For 16 cities, it is approaching
                        1 trillion circuits!
                    </p>
                </details>

            </details>

            <details>
                <summary class="sum1">
                Planar Graphs
                <br />
                PERHAPS NOT COVERED SPRING 2018
                </summary>
            </details>

            <details>
                <summary class="sum1">
                Graph Coloring
                <br />
                NOT COVERED SPRING 2018
                </summary>
            </details>

    </body>
</html>
